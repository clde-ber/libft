int		ft_strlen(char *str)
{
	int i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

int		check_base(char *base)
{
	int i;
	int j;

	i = 0;
	if (ft_strlen(base) == 0 || ft_strlen(base) == 1)
		return (0);
	while (base[i])
	{
		if (base[i] == ' ' || base[i] == '\t' || base[i] == '\n'
				|| base[i] == '\r' || base[i] == '\v' || base[i] == '\f'
				|| base[i] == '+' || base[i] == '-')
			return (0);
		j = i + 1;
		while (base[j])
		{
			if (base[i] == base[j])
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

int		detect_index(char *base, char c)
{
	int i;

	i = 0;
	while (base[i])
	{
		if (base[i] == c)
			return (i);
		i++;
	}
	return (-1);
}

int		check_character(char c)
{
	if (c == '\t' || c == '\n' || c == '\r' || c == '\v'
	|| c == '\f' || c == ' ' || c == '+' || c == '-')
		return (1);
	return (0);
}

int		ft_atoi_base(char *str, char *base)
{
	int c[4];

	c[0] = 0;
	c[1] = 1;
	c[2] = 0;
	if (check_base(base))
	{
		while (check_character(str[c[0]]))
		{
			if (str[c[0]] == '-')
				c[1] = -c[1];
			c[0]++;
		}
		while (str[c[0]] != '\0' && check_character(str[c[0]]) == 0
		&& detect_index(base, str[c[0]]) >= 0)
		{
			c[3] = detect_index(base, str[c[0]]);
			c[2] = (c[2] * ft_strlen(base)) + (c[3] % ft_strlen(base));
			c[0]++;
		}
		return (c[2] * c[1]);
	}
	return (0);
}
