#include <unistd.h>

int		ft_strlen(char *str)
{
	int i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

int		ft_strlen_nbr(unsigned int nbr, char *base)
{
	int i;

	i = 0;
	while (nbr > 0)
	{
		nbr = nbr / ft_strlen(base);
		i++;
	}
	return (i);
}

void	write_number(char *base, char *tab, unsigned int nbr_len)
{
	int i;
	int pos;

	i = 0;
	while (i < nbr_len)
	{
		pos = nbr_len - 1 - i;
		write(1, &(base[tab[pos] - '0']), 1);
		i++;
	}
}

int		check_base(char *base)
{
	int i;
	int j;

	i = 0;
	if (ft_strlen(base) == 0 || ft_strlen(base) == 1)
		return (0);
	while (base[i])
	{
		if (!((base[i] >= 'a' && base[i] <= 'z') || (base[i] >= 'A'
		&& base[i] <= 'Z') || (base[i] >= '0' && base[i] <= '9')))
			return (0);
		j = i + 1;
		while (base[j])
		{
			if (base[i] == base[j])
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

void	ft_putnbr_base(int nbr, char *base)
{
	unsigned int		i;
	unsigned int		nb;
	unsigned int		nbr_len;
	char				tab[ft_strlen_nbr(nbr, base)];

	i = 0;
	nbr_len = ft_strlen_nbr((unsigned int)nbr, base);
	if (check_base(base))
	{
		if (nbr == 0)
			write(1, &base[i], 1);
		if (nbr < 0)
		{
			write(1, "-", 1);
			nb = nbr * -1;
		}
		nbr = nb;
		while (nb > 0)
		{
			tab[i] = nb % ft_strlen(base) + '0';
			nb = nb / ft_strlen(base);
			i++;
		}
		write_number(base, tab, nbr_len);
	}
}

int main()
{
		int nbr;
			char *base;

				nbr = 10111;
					base = "01"
}
